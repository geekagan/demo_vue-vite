# 工作流名称（在 GitHub Actions 面板中显示）
name: 构建并部署到 GitHub Pages

# 触发条件：当代码推送到 main 分支时自动执行（可修改为你的主分支，如 master）
on:
  push:
    branches: [ main ]
  workflow_dispatch:

# 工作流任务定义
jobs:
  # 任务1：构建项目（生成 dist 产物）
  build:
    # 运行环境：选择最新的 Ubuntu 系统（稳定且常用）
    runs-on: ubuntu-latest
    steps:
      # 步骤1：拉取当前仓库的代码到运行环境
      - name: 拉取仓库代码
        uses: actions/checkout@v4  # 使用官方的代码拉取 Action，v4 是最新稳定版

      # 步骤2：安装 Node.js 环境（需与项目本地开发的 Node 版本匹配，推荐 18+）
      - name: 安装 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20  # 指定 Node 版本（可改为 20 等，需与项目兼容）

      # 步骤3：安装 pnpm 包管理器（GitHub 环境默认不含 pnpm，需手动安装）
      - name: 安装 pnpm
        uses: pnpm/action-setup@v3  # pnpm 官方提供的安装 Action，v3 稳定
        with:
          version: 10  # 指定 pnpm 版本（可改为 9 等，需与项目兼容）
          run_install: false  # 暂不自动安装依赖，后续手动执行

      # 步骤4：安装项目依赖（使用 pnpm）
      - name: 安装项目依赖
        run: pnpm install  # 若有私有源，可添加 --registry 配置

      # 步骤5：构建项目（生成 dist 目录，命令需与 package.json 中的 build 脚本一致）
      - name: 构建项目
        run: pnpm run build  # 执行 Vite 构建命令，生成静态产物到 dist
      
      # 步骤6：保存构建产物（作为后续部署任务的输入）
      - name: 保存构建产物
        uses: actions/upload-artifact@v4  # 上传 dist 到 GitHub 临时存储
        with:
          name: github-pages  # 工件名必须是 "github-pages"，不可修改
          path: dist/      # 要上传的目录路径（Vite 构建默认输出到 dist）
          overwrite: true  # 覆盖同名文件
      
      # 步骤7：在构建任务末尾添加验证步骤
      - name: 验证构建产物
        run: |
          echo "构建产物内容："
          ls -la dist/
          echo "文件总大小："
          du -sh dist/
      
      # 新增步骤：检查构建产物中的链接和大小
      - name: 检查构建产物（链接+大小）
        run: |
          # 1. 进入构建目录（根据你的实际目录修改，如 build、_site）
          cd dist
          # 2. 检查符号链接，若存在则报错终止
          echo "=== 检查符号链接 ==="
          SYMLINKS=$(find . -type l)
          if [ -n "$SYMLINKS" ]; then
            echo "错误：发现符号链接，禁止部署："
            echo "$SYMLINKS"
            exit 1 # 终止工作流
          fi
          # 3. 检查硬链接（可选，需安装 coreutils）
          echo "=== 检查硬链接 ==="
          HARD_LINKS=$(find . -type f -links +1)
          if [ -n "$HARD_LINKS" ]; then
            echo "错误：发现硬链接，禁止部署："
            echo "$HARD_LINKS"
            exit 1
          fi
          # 4. 检查产物大小（单位：GB），超过 9GB 则警告（留 1GB 冗余）
          echo "=== 检查产物大小 ==="
          TOTAL_SIZE=$(du -sb . | awk '{print $1 / 1024 / 1024 / 1024}')
          echo "当前产物总大小：$TOTAL_SIZE GB"
          if (( $(echo "$TOTAL_SIZE > 9" | bc -l) )); then
            echo "警告：产物大小超过 9GB，接近 10GB 限制，请清理冗余文件！"
            # 若需严格限制，可改为 exit 1 终止部署
          fi

  # 任务2：部署构建产物到 GitHub Pages（依赖 build 任务执行完成）
  deploy:
    needs: build          # 明确依赖 build 任务，确保构建完成后再部署
    runs-on: ubuntu-latest
    permissions:
      pages: write        # 授予操作 GitHub Pages 的权限
      id-token: write     # 用于身份验证（新版 GitHub Pages 必需）
    environment: 
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}  # 部署后生成访问链接

    steps:
      # 步骤1：下载之前保存的构建产物（dist 目录）
      - name: 下载构建产物
        uses: actions/download-artifact@v4  # 从临时存储下载 dist
        with:
          name: github-pages  # 需与 build 任务中上传的产物名称一致
          path: dist/           # 下载到当前环境的 dist 目录

      - name: 验证下载产物
        run: |
          echo "构建产物内容："
          ls -la dist/
          echo "文件总大小："
          du -sh dist/

      # 步骤2：部署 dist 目录到 GitHub Pages
      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4  # GitHub 官方部署 Action（无需手动处理分支）
        with:
          artifact_name: github-pages
